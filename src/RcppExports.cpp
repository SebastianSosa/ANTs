// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// metric_global_shortestPath
SEXP metric_global_shortestPath(NumericMatrix disMap);
RcppExport SEXP _ANTs_metric_global_shortestPath(SEXP disMapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type disMap(disMapSEXP);
    rcpp_result_gen = Rcpp::wrap(metric_global_shortestPath(disMap));
    return rcpp_result_gen;
END_RCPP
}
// metric_global_shortestDetails
SEXP metric_global_shortestDetails(NumericMatrix disMap);
RcppExport SEXP _ANTs_metric_global_shortestDetails(SEXP disMapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type disMap(disMapSEXP);
    rcpp_result_gen = Rcpp::wrap(metric_global_shortestDetails(disMap));
    return rcpp_result_gen;
END_RCPP
}
// metric_node_betweeness
SEXP metric_node_betweeness(NumericMatrix disMap);
RcppExport SEXP _ANTs_metric_node_betweeness(SEXP disMapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type disMap(disMapSEXP);
    rcpp_result_gen = Rcpp::wrap(metric_node_betweeness(disMap));
    return rcpp_result_gen;
END_RCPP
}
// metric_global_triangle
SEXP metric_global_triangle(NumericMatrix disMap);
RcppExport SEXP _ANTs_metric_global_triangle(SEXP disMapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type disMap(disMapSEXP);
    rcpp_result_gen = Rcpp::wrap(metric_global_triangle(disMap));
    return rcpp_result_gen;
END_RCPP
}
// assoc_mat
arma::mat assoc_mat(arma::mat Mgbi, std::string method, bool return_denom);
RcppExport SEXP _ANTs_assoc_mat(SEXP MgbiSEXP, SEXP methodSEXP, SEXP return_denomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Mgbi(MgbiSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< bool >::type return_denom(return_denomSEXP);
    rcpp_result_gen = Rcpp::wrap(assoc_mat(Mgbi, method, return_denom));
    return rcpp_result_gen;
END_RCPP
}
// assoc_mat_full
Rcpp::List assoc_mat_full(arma::mat Mgbi, std::string method);
RcppExport SEXP _ANTs_assoc_mat_full(SEXP MgbiSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Mgbi(MgbiSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(assoc_mat_full(Mgbi, method));
    return rcpp_result_gen;
END_RCPP
}
// assoc_mat_one_id
arma::rowvec assoc_mat_one_id(arma::mat Mgbi, int id, std::string method);
RcppExport SEXP _ANTs_assoc_mat_one_id(SEXP MgbiSEXP, SEXP idSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Mgbi(MgbiSEXP);
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(assoc_mat_one_id(Mgbi, id, method));
    return rcpp_result_gen;
END_RCPP
}
// df_merge
List df_merge(DataFrame df1, DataFrame df2);
RcppExport SEXP _ANTs_df_merge(SEXP df1SEXP, SEXP df2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df1(df1SEXP);
    Rcpp::traits::input_parameter< DataFrame >::type df2(df2SEXP);
    rcpp_result_gen = Rcpp::wrap(df_merge(df1, df2));
    return rcpp_result_gen;
END_RCPP
}
// df_to_gbi
Rcpp::NumericMatrix df_to_gbi(Rcpp::DataFrame d, int col_scan, int col_id, Rcpp::CharacterVector uIds, Rcpp::CharacterVector uScans);
RcppExport SEXP _ANTs_df_to_gbi(SEXP dSEXP, SEXP col_scanSEXP, SEXP col_idSEXP, SEXP uIdsSEXP, SEXP uScansSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type col_scan(col_scanSEXP);
    Rcpp::traits::input_parameter< int >::type col_id(col_idSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type uIds(uIdsSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type uScans(uScansSEXP);
    rcpp_result_gen = Rcpp::wrap(df_to_gbi(d, col_scan, col_id, uIds, uScans));
    return rcpp_result_gen;
END_RCPP
}
// edgl_to_matrix
NumericMatrix edgl_to_matrix(DataFrame df, bool sym);
RcppExport SEXP _ANTs_edgl_to_matrix(SEXP dfSEXP, SEXP symSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< bool >::type sym(symSEXP);
    rcpp_result_gen = Rcpp::wrap(edgl_to_matrix(df, sym));
    return rcpp_result_gen;
END_RCPP
}
// euclidean
double euclidean(NumericVector vec);
RcppExport SEXP _ANTs_euclidean(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(euclidean(vec));
    return rcpp_result_gen;
END_RCPP
}
// gbi_createEmpty
NumericMatrix gbi_createEmpty(DataFrame d, int col_scan, int col_id);
RcppExport SEXP _ANTs_gbi_createEmpty(SEXP dSEXP, SEXP col_scanSEXP, SEXP col_idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type col_scan(col_scanSEXP);
    Rcpp::traits::input_parameter< int >::type col_id(col_idSEXP);
    rcpp_result_gen = Rcpp::wrap(gbi_createEmpty(d, col_scan, col_id));
    return rcpp_result_gen;
END_RCPP
}
// ldf_merge
List ldf_merge(List ldf);
RcppExport SEXP _ANTs_ldf_merge(SEXP ldfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type ldf(ldfSEXP);
    rcpp_result_gen = Rcpp::wrap(ldf_merge(ldf));
    return rcpp_result_gen;
END_RCPP
}
// listDf_merge_single_column
SEXP listDf_merge_single_column(Rcpp::DataFrame df, Rcpp::List ldf, int col);
RcppExport SEXP _ANTs_listDf_merge_single_column(SEXP dfSEXP, SEXP ldfSEXP, SEXP colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ldf(ldfSEXP);
    Rcpp::traits::input_parameter< int >::type col(colSEXP);
    rcpp_result_gen = Rcpp::wrap(listDf_merge_single_column(df, ldf, col));
    return rcpp_result_gen;
END_RCPP
}
// list_lapply
List list_lapply(List input, Function f);
RcppExport SEXP _ANTs_list_lapply(SEXP inputSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(list_lapply(input, f));
    return rcpp_result_gen;
END_RCPP
}
// list_to_df
List list_to_df(List a);
RcppExport SEXP _ANTs_list_to_df(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(list_to_df(a));
    return rcpp_result_gen;
END_RCPP
}
// mat_binaryzation
arma::mat mat_binaryzation(arma::mat M);
RcppExport SEXP _ANTs_mat_binaryzation(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_binaryzation(M));
    return rcpp_result_gen;
END_RCPP
}
// mat_col_extract
NumericVector mat_col_extract(NumericMatrix m, int x);
RcppExport SEXP _ANTs_mat_col_extract(SEXP mSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_col_extract(m, x));
    return rcpp_result_gen;
END_RCPP
}
// mat_col_sumsBinary
NumericVector mat_col_sumsBinary(NumericMatrix m);
RcppExport SEXP _ANTs_mat_col_sumsBinary(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_col_sumsBinary(m));
    return rcpp_result_gen;
END_RCPP
}
// mat_cols_sums
NumericVector mat_cols_sums(NumericMatrix m);
RcppExport SEXP _ANTs_mat_cols_sums(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_cols_sums(m));
    return rcpp_result_gen;
END_RCPP
}
// mat_dim
NumericVector mat_dim(NumericMatrix m);
RcppExport SEXP _ANTs_mat_dim(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_dim(m));
    return rcpp_result_gen;
END_RCPP
}
// mat_erase_col
NumericMatrix mat_erase_col(NumericMatrix M, int a);
RcppExport SEXP _ANTs_mat_erase_col(SEXP MSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_erase_col(M, a));
    return rcpp_result_gen;
END_RCPP
}
// mat_fill_upper
NumericMatrix mat_fill_upper(NumericMatrix m);
RcppExport SEXP _ANTs_mat_fill_upper(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_fill_upper(m));
    return rcpp_result_gen;
END_RCPP
}
// mat_filter
arma::mat mat_filter(arma::mat m, double threshold, double replace);
RcppExport SEXP _ANTs_mat_filter(SEXP mSEXP, SEXP thresholdSEXP, SEXP replaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< double >::type replace(replaceSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_filter(m, threshold, replace));
    return rcpp_result_gen;
END_RCPP
}
// mat_find0
Rcpp::DataFrame mat_find0(arma::mat m);
RcppExport SEXP _ANTs_mat_find0(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_find0(m));
    return rcpp_result_gen;
END_RCPP
}
// mat_isSquare
bool mat_isSquare(NumericMatrix m);
RcppExport SEXP _ANTs_mat_isSquare(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_isSquare(m));
    return rcpp_result_gen;
END_RCPP
}
// mat_lowertri_to_vec
NumericVector mat_lowertri_to_vec(Rcpp::NumericMatrix& m, bool diag);
RcppExport SEXP _ANTs_mat_lowertri_to_vec(SEXP mSEXP, SEXP diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type diag(diagSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_lowertri_to_vec(m, diag));
    return rcpp_result_gen;
END_RCPP
}
// mat_row_extract
NumericVector mat_row_extract(NumericMatrix m, int x);
RcppExport SEXP _ANTs_mat_row_extract(SEXP mSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_row_extract(m, x));
    return rcpp_result_gen;
END_RCPP
}
// mat_rows_sums
NumericVector mat_rows_sums(NumericMatrix x);
RcppExport SEXP _ANTs_mat_rows_sums(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_rows_sums(x));
    return rcpp_result_gen;
END_RCPP
}
// mat_rows_sumsBinary
NumericVector mat_rows_sumsBinary(NumericMatrix x);
RcppExport SEXP _ANTs_mat_rows_sumsBinary(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_rows_sumsBinary(x));
    return rcpp_result_gen;
END_RCPP
}
// mat_row_wise_multiplication
NumericVector mat_row_wise_multiplication(NumericMatrix m, NumericVector v);
RcppExport SEXP _ANTs_mat_row_wise_multiplication(SEXP mSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_row_wise_multiplication(m, v));
    return rcpp_result_gen;
END_RCPP
}
// mat_sym_by_lowertri
SEXP mat_sym_by_lowertri(NumericMatrix& M);
RcppExport SEXP _ANTs_mat_sym_by_lowertri(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_sym_by_lowertri(M));
    return rcpp_result_gen;
END_RCPP
}
// mat_symetrization
NumericMatrix mat_symetrization(NumericMatrix M);
RcppExport SEXP _ANTs_mat_symetrization(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_symetrization(M));
    return rcpp_result_gen;
END_RCPP
}
// mat_to_vec
NumericVector mat_to_vec(NumericMatrix M, int ncol);
RcppExport SEXP _ANTs_mat_to_vec(SEXP MSEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_to_vec(M, ncol));
    return rcpp_result_gen;
END_RCPP
}
// met_assor_cat
List met_assor_cat(arma::mat& M, CharacterVector& att);
RcppExport SEXP _ANTs_met_assor_cat(SEXP MSEXP, SEXP attSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< CharacterVector& >::type att(attSEXP);
    rcpp_result_gen = Rcpp::wrap(met_assor_cat(M, att));
    return rcpp_result_gen;
END_RCPP
}
// met_degree
NumericVector met_degree(NumericMatrix M);
RcppExport SEXP _ANTs_met_degree(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(met_degree(M));
    return rcpp_result_gen;
END_RCPP
}
// met_density
double met_density(NumericMatrix M);
RcppExport SEXP _ANTs_met_density(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(met_density(M));
    return rcpp_result_gen;
END_RCPP
}
// met_eigen
NumericVector met_eigen(NumericMatrix M, double eps, int maxiter);
RcppExport SEXP _ANTs_met_eigen(SEXP MSEXP, SEXP epsSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(met_eigen(M, eps, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// met_indegree
NumericVector met_indegree(NumericMatrix M);
RcppExport SEXP _ANTs_met_indegree(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(met_indegree(M));
    return rcpp_result_gen;
END_RCPP
}
// met_nalters
NumericVector met_nalters(NumericMatrix M);
RcppExport SEXP _ANTs_met_nalters(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(met_nalters(M));
    return rcpp_result_gen;
END_RCPP
}
// met_outdegree
NumericVector met_outdegree(NumericMatrix M);
RcppExport SEXP _ANTs_met_outdegree(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(met_outdegree(M));
    return rcpp_result_gen;
END_RCPP
}
// met_strength
arma::rowvec met_strength(arma::mat M);
RcppExport SEXP _ANTs_met_strength(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(met_strength(M));
    return rcpp_result_gen;
END_RCPP
}
// met_sum_egos_strength
NumericVector met_sum_egos_strength(NumericMatrix M);
RcppExport SEXP _ANTs_met_sum_egos_strength(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(met_sum_egos_strength(M));
    return rcpp_result_gen;
END_RCPP
}
// na_omit
NumericVector na_omit(NumericVector x);
RcppExport SEXP _ANTs_na_omit(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(na_omit(x));
    return rcpp_result_gen;
END_RCPP
}
// perm_dataStream1
Rcpp::List perm_dataStream1(arma::mat M, int nperm, bool progress, std::string method);
RcppExport SEXP _ANTs_perm_dataStream1(SEXP MSEXP, SEXP npermSEXP, SEXP progressSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type nperm(npermSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(perm_dataStream1(M, nperm, progress, method));
    return rcpp_result_gen;
END_RCPP
}
// perm_dataStream1_focal
Rcpp::List perm_dataStream1_focal(arma::mat M, arma::mat M2, int nperm, bool progress, std::string method);
RcppExport SEXP _ANTs_perm_dataStream1_focal(SEXP MSEXP, SEXP M2SEXP, SEXP npermSEXP, SEXP progressSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type M2(M2SEXP);
    Rcpp::traits::input_parameter< int >::type nperm(npermSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(perm_dataStream1_focal(M, M2, nperm, progress, method));
    return rcpp_result_gen;
END_RCPP
}
// perm_dataStream_ControlFactor
Rcpp::List perm_dataStream_ControlFactor(Rcpp::List GBIList, arma::mat M, int nperm, Rcpp::IntegerVector GBIIndexes, Rcpp::IntegerVector CumSizesGbis, bool progress, std::string method);
RcppExport SEXP _ANTs_perm_dataStream_ControlFactor(SEXP GBIListSEXP, SEXP MSEXP, SEXP npermSEXP, SEXP GBIIndexesSEXP, SEXP CumSizesGbisSEXP, SEXP progressSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type GBIList(GBIListSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type nperm(npermSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type GBIIndexes(GBIIndexesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type CumSizesGbis(CumSizesGbisSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(perm_dataStream_ControlFactor(GBIList, M, nperm, GBIIndexes, CumSizesGbis, progress, method));
    return rcpp_result_gen;
END_RCPP
}
// perm_matVec
NumericVector perm_matVec(NumericVector vec, int n, IntegerVector rand);
RcppExport SEXP _ANTs_perm_matVec(SEXP vecSEXP, SEXP nSEXP, SEXP randSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rand(randSEXP);
    rcpp_result_gen = Rcpp::wrap(perm_matVec(vec, n, rand));
    return rcpp_result_gen;
END_RCPP
}
// perm_mat_col_row
NumericMatrix perm_mat_col_row(NumericMatrix M, int ncol, IntegerVector rand);
RcppExport SEXP _ANTs_perm_mat_col_row(SEXP MSEXP, SEXP ncolSEXP, SEXP randSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rand(randSEXP);
    rcpp_result_gen = Rcpp::wrap(perm_mat_col_row(M, ncol, rand));
    return rcpp_result_gen;
END_RCPP
}
// perm_net_weigths
List perm_net_weigths(DataFrame df, bool sym, int nperm, bool progress);
RcppExport SEXP _ANTs_perm_net_weigths(SEXP dfSEXP, SEXP symSEXP, SEXP npermSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< bool >::type sym(symSEXP);
    Rcpp::traits::input_parameter< int >::type nperm(npermSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(perm_net_weigths(df, sym, nperm, progress));
    return rcpp_result_gen;
END_RCPP
}
// perm_nl_rf
List perm_nl_rf(List ldf, NumericVector lables, int nperm, bool progress);
RcppExport SEXP _ANTs_perm_nl_rf(SEXP ldfSEXP, SEXP lablesSEXP, SEXP npermSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type ldf(ldfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lables(lablesSEXP);
    Rcpp::traits::input_parameter< int >::type nperm(npermSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(perm_nl_rf(ldf, lables, nperm, progress));
    return rcpp_result_gen;
END_RCPP
}
// perm_nodeLabels
Rcpp::List perm_nodeLabels(Rcpp::DataFrame df, Rcpp::NumericVector label, int nperm, bool progress);
RcppExport SEXP _ANTs_perm_nodeLabels(SEXP dfSEXP, SEXP labelSEXP, SEXP npermSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type label(labelSEXP);
    Rcpp::traits::input_parameter< int >::type nperm(npermSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(perm_nodeLabels(df, label, nperm, progress));
    return rcpp_result_gen;
END_RCPP
}
// perm_vec_factor
IntegerVector perm_vec_factor(CharacterVector vec);
RcppExport SEXP _ANTs_perm_vec_factor(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(perm_vec_factor(vec));
    return rcpp_result_gen;
END_RCPP
}
// perm_vec_int
Rcpp::List perm_vec_int(NumericVector x, int nperm, bool progress);
RcppExport SEXP _ANTs_perm_vec_int(SEXP xSEXP, SEXP npermSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nperm(npermSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(perm_vec_int(x, nperm, progress));
    return rcpp_result_gen;
END_RCPP
}
// redo_perm_dataStream1_focal
Rcpp::List redo_perm_dataStream1_focal(arma::mat M, arma::mat M2, int nperm, std::string method);
RcppExport SEXP _ANTs_redo_perm_dataStream1_focal(SEXP MSEXP, SEXP M2SEXP, SEXP npermSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type M2(M2SEXP);
    Rcpp::traits::input_parameter< int >::type nperm(npermSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(redo_perm_dataStream1_focal(M, M2, nperm, method));
    return rcpp_result_gen;
END_RCPP
}
// redo_perm_dataStream_1
Rcpp::List redo_perm_dataStream_1(arma::mat M, int nperm, std::string method);
RcppExport SEXP _ANTs_redo_perm_dataStream_1(SEXP MSEXP, SEXP npermSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type nperm(npermSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(redo_perm_dataStream_1(M, nperm, method));
    return rcpp_result_gen;
END_RCPP
}
// redo_perm_dataStream_ControlFactor
Rcpp::List redo_perm_dataStream_ControlFactor(Rcpp::List GBIList, arma::mat M, int nperm, Rcpp::IntegerVector CumSizesGbis, std::string method);
RcppExport SEXP _ANTs_redo_perm_dataStream_ControlFactor(SEXP GBIListSEXP, SEXP MSEXP, SEXP npermSEXP, SEXP CumSizesGbisSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type GBIList(GBIListSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type nperm(npermSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type CumSizesGbis(CumSizesGbisSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(redo_perm_dataStream_ControlFactor(GBIList, M, nperm, CumSizesGbis, method));
    return rcpp_result_gen;
END_RCPP
}
// redo_perm_dataStream_ControlFactor_scd
Rcpp::List redo_perm_dataStream_ControlFactor_scd(Rcpp::List GBIList, int nperm, std::string method);
RcppExport SEXP _ANTs_redo_perm_dataStream_ControlFactor_scd(SEXP GBIListSEXP, SEXP npermSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type GBIList(GBIListSEXP);
    Rcpp::traits::input_parameter< int >::type nperm(npermSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(redo_perm_dataStream_ControlFactor_scd(GBIList, nperm, method));
    return rcpp_result_gen;
END_RCPP
}
// redo_perm_dataStream_focal
Rcpp::List redo_perm_dataStream_focal(Rcpp::DataFrame df, Rcpp::List ldf1, int nperm, int col_focal, int col_alters, Rcpp::IntegerVector lengthList);
RcppExport SEXP _ANTs_redo_perm_dataStream_focal(SEXP dfSEXP, SEXP ldf1SEXP, SEXP npermSEXP, SEXP col_focalSEXP, SEXP col_altersSEXP, SEXP lengthListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ldf1(ldf1SEXP);
    Rcpp::traits::input_parameter< int >::type nperm(npermSEXP);
    Rcpp::traits::input_parameter< int >::type col_focal(col_focalSEXP);
    Rcpp::traits::input_parameter< int >::type col_alters(col_altersSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type lengthList(lengthListSEXP);
    rcpp_result_gen = Rcpp::wrap(redo_perm_dataStream_focal(df, ldf1, nperm, col_focal, col_alters, lengthList));
    return rcpp_result_gen;
END_RCPP
}
// test_nm
double test_nm(Rcpp::NumericMatrix X);
RcppExport SEXP _ANTs_test_nm(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(test_nm(X));
    return rcpp_result_gen;
END_RCPP
}
// test_arma
double test_arma(arma::mat X);
RcppExport SEXP _ANTs_test_arma(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(test_arma(X));
    return rcpp_result_gen;
END_RCPP
}
// test_nm_conv
double test_nm_conv(Rcpp::NumericMatrix X);
RcppExport SEXP _ANTs_test_nm_conv(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(test_nm_conv(X));
    return rcpp_result_gen;
END_RCPP
}
// test_const_arma
double test_const_arma(const arma::mat& X);
RcppExport SEXP _ANTs_test_const_arma(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(test_const_arma(X));
    return rcpp_result_gen;
END_RCPP
}
// met_ei2
arma::cx_mat met_ei2(const arma::mat& m);
RcppExport SEXP _ANTs_met_ei2(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(met_ei2(m));
    return rcpp_result_gen;
END_RCPP
}
// tobs_to_mat
NumericMatrix tobs_to_mat(NumericVector vec);
RcppExport SEXP _ANTs_tobs_to_mat(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(tobs_to_mat(vec));
    return rcpp_result_gen;
END_RCPP
}
// vec_char_as_factor
IntegerVector vec_char_as_factor(SEXP vec);
RcppExport SEXP _ANTs_vec_char_as_factor(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_char_as_factor(vec));
    return rcpp_result_gen;
END_RCPP
}
// vec_char_extract_IdValue
Rcpp::CharacterVector vec_char_extract_IdValue(CharacterVector y, NumericVector x);
RcppExport SEXP _ANTs_vec_char_extract_IdValue(SEXP ySEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_char_extract_IdValue(y, x));
    return rcpp_result_gen;
END_RCPP
}
// vec_num_extract
double vec_num_extract(NumericVector x, int y);
RcppExport SEXP _ANTs_vec_num_extract(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(vec_num_extract(x, y));
    return rcpp_result_gen;
END_RCPP
}
// vec_fill
SEXP vec_fill(SEXP vec1, SEXP vec2, int x);
RcppExport SEXP _ANTs_vec_fill(SEXP vec1SEXP, SEXP vec2SEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type vec1(vec1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type vec2(vec2SEXP);
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_fill(vec1, vec2, x));
    return rcpp_result_gen;
END_RCPP
}
// vec_id_Equal0
NumericVector vec_id_Equal0(NumericVector x);
RcppExport SEXP _ANTs_vec_id_Equal0(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_id_Equal0(x));
    return rcpp_result_gen;
END_RCPP
}
// vec_id_sup0
NumericVector vec_id_sup0(NumericVector x);
RcppExport SEXP _ANTs_vec_id_sup0(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_id_sup0(x));
    return rcpp_result_gen;
END_RCPP
}
// vec_intersect
CharacterVector vec_intersect(CharacterVector x, CharacterVector y);
RcppExport SEXP _ANTs_vec_intersect(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(vec_intersect(x, y));
    return rcpp_result_gen;
END_RCPP
}
// vec_levels
CharacterVector vec_levels(CharacterVector v);
RcppExport SEXP _ANTs_vec_levels(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_levels(v));
    return rcpp_result_gen;
END_RCPP
}
// vec_lowertri_to_mat
NumericMatrix vec_lowertri_to_mat(NumericVector& vec, int col, bool diag);
RcppExport SEXP _ANTs_vec_lowertri_to_mat(SEXP vecSEXP, SEXP colSEXP, SEXP diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type col(colSEXP);
    Rcpp::traits::input_parameter< bool >::type diag(diagSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_lowertri_to_mat(vec, col, diag));
    return rcpp_result_gen;
END_RCPP
}
// vec_match
NumericVector vec_match(CharacterVector x, CharacterVector y);
RcppExport SEXP _ANTs_vec_match(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(vec_match(x, y));
    return rcpp_result_gen;
END_RCPP
}
// vec_merge
SEXP vec_merge(SEXP vec1, SEXP vec2);
RcppExport SEXP _ANTs_vec_merge(SEXP vec1SEXP, SEXP vec2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type vec1(vec1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type vec2(vec2SEXP);
    rcpp_result_gen = Rcpp::wrap(vec_merge(vec1, vec2));
    return rcpp_result_gen;
END_RCPP
}
// vec_num_extract_IdValue
Rcpp::NumericVector vec_num_extract_IdValue(NumericVector y, NumericVector x);
RcppExport SEXP _ANTs_vec_num_extract_IdValue(SEXP ySEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_num_extract_IdValue(y, x));
    return rcpp_result_gen;
END_RCPP
}
// vec_resize
SEXP vec_resize(NumericVector vec, int x);
RcppExport SEXP _ANTs_vec_resize(SEXP vecSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_resize(vec, x));
    return rcpp_result_gen;
END_RCPP
}
// vec_sample
SEXP vec_sample(SEXP vec1, int length, bool replace);
RcppExport SEXP _ANTs_vec_sample(SEXP vec1SEXP, SEXP lengthSEXP, SEXP replaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type vec1(vec1SEXP);
    Rcpp::traits::input_parameter< int >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< bool >::type replace(replaceSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_sample(vec1, length, replace));
    return rcpp_result_gen;
END_RCPP
}
// vec_sample_all
SEXP vec_sample_all(SEXP vec);
RcppExport SEXP _ANTs_vec_sample_all(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_sample_all(vec));
    return rcpp_result_gen;
END_RCPP
}
// vec_sum
double vec_sum(NumericVector x);
RcppExport SEXP _ANTs_vec_sum(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_sum(x));
    return rcpp_result_gen;
END_RCPP
}
// vec_to_mat
NumericMatrix vec_to_mat(NumericVector vec, int ncol, bool diag);
RcppExport SEXP _ANTs_vec_to_mat(SEXP vecSEXP, SEXP ncolSEXP, SEXP diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< bool >::type diag(diagSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_to_mat(vec, ncol, diag));
    return rcpp_result_gen;
END_RCPP
}
// vec_to_mat_add_diag
NumericMatrix vec_to_mat_add_diag(NumericVector vec, int ncol);
RcppExport SEXP _ANTs_vec_to_mat_add_diag(SEXP vecSEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_to_mat_add_diag(vec, ncol));
    return rcpp_result_gen;
END_RCPP
}
// vec_unique
Rcpp::CharacterVector vec_unique(Rcpp::CharacterVector v);
RcppExport SEXP _ANTs_vec_unique(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_unique(v));
    return rcpp_result_gen;
END_RCPP
}
// vec_unmatch
NumericVector vec_unmatch(CharacterVector x, CharacterVector y);
RcppExport SEXP _ANTs_vec_unmatch(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(vec_unmatch(x, y));
    return rcpp_result_gen;
END_RCPP
}
// vec_unmatch_indexcc
NumericVector vec_unmatch_indexcc(CharacterVector x, CharacterVector y);
RcppExport SEXP _ANTs_vec_unmatch_indexcc(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(vec_unmatch_indexcc(x, y));
    return rcpp_result_gen;
END_RCPP
}
// vec_vec_multiply
NumericVector vec_vec_multiply(NumericVector x, NumericVector y);
RcppExport SEXP _ANTs_vec_vec_multiply(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(vec_vec_multiply(x, y));
    return rcpp_result_gen;
END_RCPP
}
// vec_vec_sum
NumericVector vec_vec_sum(NumericVector x, NumericVector y);
RcppExport SEXP _ANTs_vec_vec_sum(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(vec_vec_sum(x, y));
    return rcpp_result_gen;
END_RCPP
}
// vector_abs
NumericVector vector_abs(NumericVector vec);
RcppExport SEXP _ANTs_vector_abs(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_abs(vec));
    return rcpp_result_gen;
END_RCPP
}
// which_equal
arma::umat which_equal(arma::mat M, int x);
RcppExport SEXP _ANTs_which_equal(SEXP MSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(which_equal(M, x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ANTs_metric_global_shortestPath", (DL_FUNC) &_ANTs_metric_global_shortestPath, 1},
    {"_ANTs_metric_global_shortestDetails", (DL_FUNC) &_ANTs_metric_global_shortestDetails, 1},
    {"_ANTs_metric_node_betweeness", (DL_FUNC) &_ANTs_metric_node_betweeness, 1},
    {"_ANTs_metric_global_triangle", (DL_FUNC) &_ANTs_metric_global_triangle, 1},
    {"_ANTs_assoc_mat", (DL_FUNC) &_ANTs_assoc_mat, 3},
    {"_ANTs_assoc_mat_full", (DL_FUNC) &_ANTs_assoc_mat_full, 2},
    {"_ANTs_assoc_mat_one_id", (DL_FUNC) &_ANTs_assoc_mat_one_id, 3},
    {"_ANTs_df_merge", (DL_FUNC) &_ANTs_df_merge, 2},
    {"_ANTs_df_to_gbi", (DL_FUNC) &_ANTs_df_to_gbi, 5},
    {"_ANTs_edgl_to_matrix", (DL_FUNC) &_ANTs_edgl_to_matrix, 2},
    {"_ANTs_euclidean", (DL_FUNC) &_ANTs_euclidean, 1},
    {"_ANTs_gbi_createEmpty", (DL_FUNC) &_ANTs_gbi_createEmpty, 3},
    {"_ANTs_ldf_merge", (DL_FUNC) &_ANTs_ldf_merge, 1},
    {"_ANTs_listDf_merge_single_column", (DL_FUNC) &_ANTs_listDf_merge_single_column, 3},
    {"_ANTs_list_lapply", (DL_FUNC) &_ANTs_list_lapply, 2},
    {"_ANTs_list_to_df", (DL_FUNC) &_ANTs_list_to_df, 1},
    {"_ANTs_mat_binaryzation", (DL_FUNC) &_ANTs_mat_binaryzation, 1},
    {"_ANTs_mat_col_extract", (DL_FUNC) &_ANTs_mat_col_extract, 2},
    {"_ANTs_mat_col_sumsBinary", (DL_FUNC) &_ANTs_mat_col_sumsBinary, 1},
    {"_ANTs_mat_cols_sums", (DL_FUNC) &_ANTs_mat_cols_sums, 1},
    {"_ANTs_mat_dim", (DL_FUNC) &_ANTs_mat_dim, 1},
    {"_ANTs_mat_erase_col", (DL_FUNC) &_ANTs_mat_erase_col, 2},
    {"_ANTs_mat_fill_upper", (DL_FUNC) &_ANTs_mat_fill_upper, 1},
    {"_ANTs_mat_filter", (DL_FUNC) &_ANTs_mat_filter, 3},
    {"_ANTs_mat_find0", (DL_FUNC) &_ANTs_mat_find0, 1},
    {"_ANTs_mat_isSquare", (DL_FUNC) &_ANTs_mat_isSquare, 1},
    {"_ANTs_mat_lowertri_to_vec", (DL_FUNC) &_ANTs_mat_lowertri_to_vec, 2},
    {"_ANTs_mat_row_extract", (DL_FUNC) &_ANTs_mat_row_extract, 2},
    {"_ANTs_mat_rows_sums", (DL_FUNC) &_ANTs_mat_rows_sums, 1},
    {"_ANTs_mat_rows_sumsBinary", (DL_FUNC) &_ANTs_mat_rows_sumsBinary, 1},
    {"_ANTs_mat_row_wise_multiplication", (DL_FUNC) &_ANTs_mat_row_wise_multiplication, 2},
    {"_ANTs_mat_sym_by_lowertri", (DL_FUNC) &_ANTs_mat_sym_by_lowertri, 1},
    {"_ANTs_mat_symetrization", (DL_FUNC) &_ANTs_mat_symetrization, 1},
    {"_ANTs_mat_to_vec", (DL_FUNC) &_ANTs_mat_to_vec, 2},
    {"_ANTs_met_assor_cat", (DL_FUNC) &_ANTs_met_assor_cat, 2},
    {"_ANTs_met_degree", (DL_FUNC) &_ANTs_met_degree, 1},
    {"_ANTs_met_density", (DL_FUNC) &_ANTs_met_density, 1},
    {"_ANTs_met_eigen", (DL_FUNC) &_ANTs_met_eigen, 3},
    {"_ANTs_met_indegree", (DL_FUNC) &_ANTs_met_indegree, 1},
    {"_ANTs_met_nalters", (DL_FUNC) &_ANTs_met_nalters, 1},
    {"_ANTs_met_outdegree", (DL_FUNC) &_ANTs_met_outdegree, 1},
    {"_ANTs_met_strength", (DL_FUNC) &_ANTs_met_strength, 1},
    {"_ANTs_met_sum_egos_strength", (DL_FUNC) &_ANTs_met_sum_egos_strength, 1},
    {"_ANTs_na_omit", (DL_FUNC) &_ANTs_na_omit, 1},
    {"_ANTs_perm_dataStream1", (DL_FUNC) &_ANTs_perm_dataStream1, 4},
    {"_ANTs_perm_dataStream1_focal", (DL_FUNC) &_ANTs_perm_dataStream1_focal, 5},
    {"_ANTs_perm_dataStream_ControlFactor", (DL_FUNC) &_ANTs_perm_dataStream_ControlFactor, 7},
    {"_ANTs_perm_matVec", (DL_FUNC) &_ANTs_perm_matVec, 3},
    {"_ANTs_perm_mat_col_row", (DL_FUNC) &_ANTs_perm_mat_col_row, 3},
    {"_ANTs_perm_net_weigths", (DL_FUNC) &_ANTs_perm_net_weigths, 4},
    {"_ANTs_perm_nl_rf", (DL_FUNC) &_ANTs_perm_nl_rf, 4},
    {"_ANTs_perm_nodeLabels", (DL_FUNC) &_ANTs_perm_nodeLabels, 4},
    {"_ANTs_perm_vec_factor", (DL_FUNC) &_ANTs_perm_vec_factor, 1},
    {"_ANTs_perm_vec_int", (DL_FUNC) &_ANTs_perm_vec_int, 3},
    {"_ANTs_redo_perm_dataStream1_focal", (DL_FUNC) &_ANTs_redo_perm_dataStream1_focal, 4},
    {"_ANTs_redo_perm_dataStream_1", (DL_FUNC) &_ANTs_redo_perm_dataStream_1, 3},
    {"_ANTs_redo_perm_dataStream_ControlFactor", (DL_FUNC) &_ANTs_redo_perm_dataStream_ControlFactor, 5},
    {"_ANTs_redo_perm_dataStream_ControlFactor_scd", (DL_FUNC) &_ANTs_redo_perm_dataStream_ControlFactor_scd, 3},
    {"_ANTs_redo_perm_dataStream_focal", (DL_FUNC) &_ANTs_redo_perm_dataStream_focal, 6},
    {"_ANTs_test_nm", (DL_FUNC) &_ANTs_test_nm, 1},
    {"_ANTs_test_arma", (DL_FUNC) &_ANTs_test_arma, 1},
    {"_ANTs_test_nm_conv", (DL_FUNC) &_ANTs_test_nm_conv, 1},
    {"_ANTs_test_const_arma", (DL_FUNC) &_ANTs_test_const_arma, 1},
    {"_ANTs_met_ei2", (DL_FUNC) &_ANTs_met_ei2, 1},
    {"_ANTs_tobs_to_mat", (DL_FUNC) &_ANTs_tobs_to_mat, 1},
    {"_ANTs_vec_char_as_factor", (DL_FUNC) &_ANTs_vec_char_as_factor, 1},
    {"_ANTs_vec_char_extract_IdValue", (DL_FUNC) &_ANTs_vec_char_extract_IdValue, 2},
    {"_ANTs_vec_num_extract", (DL_FUNC) &_ANTs_vec_num_extract, 2},
    {"_ANTs_vec_fill", (DL_FUNC) &_ANTs_vec_fill, 3},
    {"_ANTs_vec_id_Equal0", (DL_FUNC) &_ANTs_vec_id_Equal0, 1},
    {"_ANTs_vec_id_sup0", (DL_FUNC) &_ANTs_vec_id_sup0, 1},
    {"_ANTs_vec_intersect", (DL_FUNC) &_ANTs_vec_intersect, 2},
    {"_ANTs_vec_levels", (DL_FUNC) &_ANTs_vec_levels, 1},
    {"_ANTs_vec_lowertri_to_mat", (DL_FUNC) &_ANTs_vec_lowertri_to_mat, 3},
    {"_ANTs_vec_match", (DL_FUNC) &_ANTs_vec_match, 2},
    {"_ANTs_vec_merge", (DL_FUNC) &_ANTs_vec_merge, 2},
    {"_ANTs_vec_num_extract_IdValue", (DL_FUNC) &_ANTs_vec_num_extract_IdValue, 2},
    {"_ANTs_vec_resize", (DL_FUNC) &_ANTs_vec_resize, 2},
    {"_ANTs_vec_sample", (DL_FUNC) &_ANTs_vec_sample, 3},
    {"_ANTs_vec_sample_all", (DL_FUNC) &_ANTs_vec_sample_all, 1},
    {"_ANTs_vec_sum", (DL_FUNC) &_ANTs_vec_sum, 1},
    {"_ANTs_vec_to_mat", (DL_FUNC) &_ANTs_vec_to_mat, 3},
    {"_ANTs_vec_to_mat_add_diag", (DL_FUNC) &_ANTs_vec_to_mat_add_diag, 2},
    {"_ANTs_vec_unique", (DL_FUNC) &_ANTs_vec_unique, 1},
    {"_ANTs_vec_unmatch", (DL_FUNC) &_ANTs_vec_unmatch, 2},
    {"_ANTs_vec_unmatch_indexcc", (DL_FUNC) &_ANTs_vec_unmatch_indexcc, 2},
    {"_ANTs_vec_vec_multiply", (DL_FUNC) &_ANTs_vec_vec_multiply, 2},
    {"_ANTs_vec_vec_sum", (DL_FUNC) &_ANTs_vec_vec_sum, 2},
    {"_ANTs_vector_abs", (DL_FUNC) &_ANTs_vector_abs, 1},
    {"_ANTs_which_equal", (DL_FUNC) &_ANTs_which_equal, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_ANTs(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
